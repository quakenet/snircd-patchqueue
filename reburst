# HG changeset patch
# Parent 3b7390e3248ec1fea327faf4d4ab1af59fe995f1

diff -r 3b7390e3248e include/handlers.h
--- a/include/handlers.h	Sun Jul 14 14:02:02 2013 +0100
+++ b/include/handlers.h	Sun Jul 14 14:06:30 2013 +0100
@@ -224,6 +224,7 @@
 extern int ms_privmsg(struct Client*, struct Client*, int, char*[]);
 extern int ms_privs(struct Client*, struct Client*, int, char*[]);
 extern int ms_quit(struct Client*, struct Client*, int, char*[]);
+extern int ms_reburst(struct Client*, struct Client*, int, char*[]);
 extern int ms_rping(struct Client*, struct Client*, int, char*[]);
 extern int ms_rpong(struct Client*, struct Client*, int, char*[]);
 extern int ms_server(struct Client*, struct Client*, int, char*[]);
diff -r 3b7390e3248e include/msg.h
--- a/include/msg.h	Sun Jul 14 14:02:02 2013 +0100
+++ b/include/msg.h	Sun Jul 14 14:06:30 2013 +0100
@@ -363,6 +363,10 @@
 #define TOK_SETHOST		"SH"
 #define CMD_SETHOST		MSG_SETHOST, TOK_SETHOST
 
+#define MSG_REBURST               "REBURST"         /* REBURST */
+#define TOK_REBURST               "RB"
+#define CMD_REBURST               MSG_REBURST, TOK_REBURST
+
 #define MSG_CAP			"CAP"
 #define TOK_CAP			"CAP"
 #define CMD_CAP			MSG_CAP, TOK_CAP
diff -r 3b7390e3248e ircd/Makefile.in
--- a/ircd/Makefile.in	Sun Jul 14 14:02:02 2013 +0100
+++ b/ircd/Makefile.in	Sun Jul 14 14:06:30 2013 +0100
@@ -161,6 +161,7 @@
 	m_proto.c \
 	m_pseudo.c \
 	m_quit.c \
+	m_reburst.c \
 	m_rehash.c \
 	m_reset.c \
 	m_restart.c \
diff -r 3b7390e3248e ircd/m_reburst.c
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/ircd/m_reburst.c	Sun Jul 14 14:06:30 2013 +0100
@@ -0,0 +1,137 @@
+/*
+ * IRC - Internet Relay Chat, ircd/m_reburst.c
+ * Copyright (C) 1990 Jarkko Oikarinen and
+ *                    University of Oulu, Computing Center
+ *
+ * See file AUTHORS in IRC package for additional names of
+ * the programmers.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 1, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ * $Id: m_burst.c,v 1.40.2.6 2008/01/03 00:07:21 klmitch Exp $
+ */
+
+/*
+ * m_functions execute protocol messages on this server:
+ *
+ *    cptr    is always NON-NULL, pointing to a *LOCAL* client
+ *            structure (with an open socket connected!). This
+ *            identifies the physical socket where the message
+ *            originated (or which caused the m_function to be
+ *            executed--some m_functions may call others...).
+ *
+ *    sptr    is the source of the message, defined by the
+ *            prefix part of the message if present. If not
+ *            or prefix not found, then sptr==cptr.
+ *
+ *            (!IsServer(cptr)) => (cptr == sptr), because
+ *            prefixes are taken *only* from servers...
+ *
+ *            (IsServer(cptr))
+ *                    (sptr == cptr) => the message didn't
+ *                    have the prefix.
+ *
+ *                    (sptr != cptr && IsServer(sptr) means
+ *                    the prefix specified servername. (?)
+ *
+ *                    (sptr != cptr && !IsServer(sptr) means
+ *                    that message originated from a remote
+ *                    user (not local).
+ *
+ *            combining
+ *
+ *            (!IsServer(sptr)) means that, sptr can safely
+ *            taken as defining the target structure of the
+ *            message in this server.
+ *
+ *    *Always* true (if 'parse' and others are working correct):
+ *
+ *    1)      sptr->from == cptr  (note: cptr->from == cptr)
+ *
+ *    2)      MyConnect(sptr) <=> sptr == cptr (e.g. sptr
+ *            *cannot* be a local connection, unless it's
+ *            actually cptr!). [MyConnect(x) should probably
+ *            be defined as (x == x->from) --msa ]
+ *
+ *    parc    number of variable parameter strings (if zero,
+ *            parv is allowed to be NULL)
+ *
+ *    parv    a NULL terminated list of parameter pointers,
+ *
+ *                    parv[0], sender (prefix string), if not present
+ *                            this points to an empty string.
+ *                    parv[1]...parv[parc-1]
+ *                            pointers to additional parameters
+ *                    parv[parc] == NULL, *always*
+ *
+ *            note:   it is guaranteed that parv[0]..parv[parc-1] are all
+ *                    non-NULL pointers.
+ */
+#include "config.h"
+
+#include "channel.h"
+#include "client.h"
+#include "hash.h"
+#include "ircd.h"
+#include "ircd_alloc.h"
+#include "ircd_features.h"
+#include "ircd_log.h"
+#include "ircd_reply.h"
+#include "ircd_string.h"
+#include "list.h"
+#include "match.h"
+#include "msg.h"
+#include "numeric.h"
+#include "numnicks.h"
+#include "s_conf.h"
+#include "s_misc.h"
+#include "send.h"
+#include "struct.h"
+#include "ircd_snprintf.h"
+#include "gline.h"
+#include "jupe.h"
+
+/* #include <assert.h> -- Now using assert in ircd_log.h */
+#include <stdlib.h>
+#include <string.h>
+#include <ctype.h>
+
+
+/*
+ * ms_reburst - server message handler
+ */
+int ms_reburst(struct Client *cptr, struct Client *sptr, int parc, char *parv[])
+{
+  char *type = parv[1];
+
+  if (parc < 2)
+    return protocol_violation(sptr,"Too few parameters for REBURST");
+
+  assert(type);
+
+  switch (*type) {
+    case 'g':
+    case 'G':
+      gline_burst(sptr);
+      break;
+    case 'j':
+    case 'J': 
+      jupe_burst(sptr);
+      break;
+    default:
+      break;
+  }
+  return 0;
+}
diff -r 3b7390e3248e ircd/parse.c
--- a/ircd/parse.c	Sun Jul 14 14:02:02 2013 +0100
+++ b/ircd/parse.c	Sun Jul 14 14:06:30 2013 +0100
@@ -541,6 +541,13 @@
     { m_ignore, m_ignore, ms_end_of_burst_ack, m_ignore, m_ignore }
   },
   {
+    MSG_REBURST,
+    TOK_REBURST,
+    0, MAXPARA, MFLG_SLOW, 0, NULL,
+    /* UNREG, CLIENT, SERVER, OPER, SERVICE */
+    { m_ignore, m_ignore, ms_reburst, m_ignore, m_ignore }
+  },
+  {
     MSG_HASH,
     TOK_HASH,
     0, MAXPARA, MFLG_SLOW, 0, NULL,
