centralize mode checks for +c (no control codes) and +C (no CTCPs)

add client_can_send_controlcode_or_ctcp_to_channel() function in channel.c
and use that (2x ircd_relay.c, m_wallchops.c, m_wallvoices.c), instead of duplicating code 4 times
also corrects that an error is returned in WALLVOICES and WALLCHOPS in case +c or +C blocks the message, which is also done for other modes there
function loops over the text one time to check for control codes or CTCP chars, instead of twice as the old code did

diff -r 833a280b9406 include/channel.h
--- a/include/channel.h	Sat Mar 20 15:42:02 2010 +0100
+++ b/include/channel.h	Sat Mar 20 17:08:49 2010 +0100
@@ -398,6 +398,7 @@
 extern struct Membership* find_channel_member(struct Client* cptr, struct Channel* chptr);
 extern int member_can_send_to_channel(struct Membership* member, int reveal);
 extern int client_can_send_to_channel(struct Client *cptr, struct Channel *chptr, int reveal);
+extern int client_can_send_controlcode_or_ctcp_to_channel(struct Client *cptr, struct Channel *chptr, const char *text, int action);
 
 extern void remove_user_from_channel(struct Client *sptr, struct Channel *chptr);
 extern void remove_user_from_all_channels(struct Client* cptr);
diff -r 833a280b9406 ircd/channel.c
--- a/ircd/channel.c	Sat Mar 20 15:42:02 2010 +0100
+++ b/ircd/channel.c	Sat Mar 20 17:08:49 2010 +0100
@@ -778,6 +778,48 @@
   return member_can_send_to_channel(member, reveal);
 }
 
+/** Check if a client can send control codes or CTCP to a channel
+ *
+ * @param cptr The client to check
+ * @param chptr The channel to check
+ * @param text The text to check for control codes and/or CTCP chars
+ * @param action When 1 allow CTCP ACTION (for PRIVMSG),
+ *                else dont allow (for NOTICE, WALLCHOPS, and WALLVOICES)
+ *
+ * @returns true if the client is allowed to speak on the channel, false 
+ * 		otherwise
+ *
+ */
+int client_can_send_controlcode_or_ctcp_to_channel(struct Client *cptr, struct Channel *chptr, const char *text, int action)
+{
+  int control = 0, ctcp = 0;
+  const char *chr;
+
+  /* dont check this for remote users or servers - fail safe */
+  if (!MyUser(cptr) || IsServer(cptr))
+    return 1;
+  
+  /* mode +c set */
+  if (chptr->mode.mode & MODE_NOCOLOUR)
+    control = 1;
+  
+  /* mode +C set - do allow CTCP ACTION though but only when action is 1 */
+  if ((chptr->mode.mode & MODE_NOCTCP) && (!action || ircd_strncmp(text,"\001ACTION ",8)))
+    ctcp = 1;
+  
+  /* nothing to check */
+  if (!control && !ctcp)
+    return 1;
+  
+  /* search for control codes and/or CTCP chars */
+  for (chr=text;*chr;chr++) {
+    if ((ctcp && *chr==1) || ((control) && (*chr==2 || *chr==3 || *chr==22 || *chr==27 || *chr==31))) 
+      return 0;
+  }
+  
+  return 1;  
+}
+
 /** Returns the name of a channel that prevents the user from changing nick.
  * if a member and not (opped or voiced) and (banned or moderated), return
  * the name of the first channel banned on.
diff -r 833a280b9406 ircd/ircd_relay.c
--- a/ircd/ircd_relay.c	Sat Mar 20 15:42:02 2010 +0100
+++ b/ircd/ircd_relay.c	Sat Mar 20 17:08:49 2010 +0100
@@ -87,7 +87,6 @@
 void relay_channel_message(struct Client* sptr, const char* name, const char* text, const int targetc)
 {
   struct Channel* chptr;
-  const char *ch;
   assert(0 != sptr);
   assert(0 != name);
   assert(0 != text);
@@ -111,19 +110,10 @@
   }
 
   /* +cC checks */
-  if (chptr->mode.mode & MODE_NOCOLOUR)
-    for (ch=text;*ch;ch++)
-      if (*ch==2 || *ch==3 || *ch==22 || *ch==27 || *ch==31) {
-        send_reply(sptr, ERR_CANNOTSENDTOCHAN, chptr->chname);
-        return;
-      }
-
-  if ((chptr->mode.mode & MODE_NOCTCP) && ircd_strncmp(text,"\001ACTION ",8))
-    for (ch=text;*ch;)
-      if (*ch++==1) { 
-        send_reply(sptr, ERR_CANNOTSENDTOCHAN, chptr->chname);
-        return;
-      }
+  if (!client_can_send_controlcode_or_ctcp_to_channel(sptr, chptr, text, 1)) {
+    send_reply(sptr, ERR_CANNOTSENDTOCHAN, chptr->chname);
+    return;
+  }
 
   if ((chptr->mode.mode & MODE_NOPRIVMSGS) &&
       check_target_limit(sptr, chptr, chptr->chname, 0))
@@ -144,7 +134,6 @@
 void relay_channel_notice(struct Client* sptr, const char* name, const char* text, const int targetc)
 {
   struct Channel* chptr;
-  const char *ch;
   assert(0 != sptr);
   assert(0 != name);
   assert(0 != text);
@@ -165,15 +154,8 @@
     return;
 
   /* +cC checks */
-  if (chptr->mode.mode & MODE_NOCOLOUR)
-    for (ch=text;*ch;ch++)
-      if (*ch==2 || *ch==3 || *ch==22 || *ch==27 || *ch==31)
-        return;
-
-  if (chptr->mode.mode & MODE_NOCTCP)
-    for (ch=text;*ch;)
-      if (*ch++==1)
-        return;
+  if (!client_can_send_controlcode_or_ctcp_to_channel(sptr, chptr, text, 0))
+    return;
 
   if ((chptr->mode.mode & MODE_NOPRIVMSGS) &&
       check_target_limit(sptr, chptr, chptr->chname, 0))
diff -r 833a280b9406 ircd/m_wallchops.c
--- a/ircd/m_wallchops.c	Sat Mar 20 15:42:02 2010 +0100
+++ b/ircd/m_wallchops.c	Sat Mar 20 17:08:49 2010 +0100
@@ -103,7 +103,6 @@
 {
   struct Channel *chptr;
   struct Membership* member;
-  const char *ch;
 
   assert(0 != cptr);
   assert(cptr == sptr);
@@ -117,20 +116,9 @@
     return send_reply(sptr, ERR_NOTEXTTOSEND);
 
   if (IsChannelName(parv[1]) && (chptr = FindChannel(parv[1]))) {
-    if (client_can_send_to_channel(sptr, chptr, 0) && !(chptr->mode.mode & MODE_NONOTICE)) {
-
-      /* +cC checks */
-      if (chptr->mode.mode & MODE_NOCOLOUR)
-        for (ch=parv[parc - 1];*ch;ch++)
-          if (*ch==2 || *ch==3 || *ch==22 || *ch==27 || *ch==31) {
-            return 0;
-          }
-
-      if ((chptr->mode.mode & MODE_NOCTCP) && ircd_strncmp(parv[parc - 1],"\001ACTION ",8))
-        for (ch=parv[parc - 1];*ch;)
-          if (*ch++==1) {
-            return 0;
-          }
+    if (client_can_send_to_channel(sptr, chptr, 0) &&
+         !(chptr->mode.mode & MODE_NONOTICE) &&                                               /* +N check */
+          (client_can_send_controlcode_or_ctcp_to_channel(sptr, chptr, parv[parc - 1], 0))) { /* +cC checks */
 
       if ((chptr->mode.mode & MODE_NOPRIVMSGS) &&
           check_target_limit(sptr, chptr, chptr->chname, 0))
diff -r 833a280b9406 ircd/m_wallvoices.c
--- a/ircd/m_wallvoices.c	Sat Mar 20 15:42:02 2010 +0100
+++ b/ircd/m_wallvoices.c	Sat Mar 20 17:08:49 2010 +0100
@@ -102,7 +102,6 @@
 {
   struct Channel *chptr;
   struct Membership* member;
-  const char *ch;
 
   assert(0 != cptr);
   assert(cptr == sptr);
@@ -116,20 +115,9 @@
     return send_reply(sptr, ERR_NOTEXTTOSEND);
 
   if (IsChannelName(parv[1]) && (chptr = FindChannel(parv[1]))) {
-    if (client_can_send_to_channel(sptr, chptr, 0) && !(chptr->mode.mode & MODE_NONOTICE)) {
-
-      /* +cC checks */
-      if (chptr->mode.mode & MODE_NOCOLOUR)
-        for (ch=parv[parc - 1];*ch;ch++)
-          if (*ch==2 || *ch==3 || *ch==22 || *ch==27 || *ch==31) {
-            return 0;
-          }
-
-      if ((chptr->mode.mode & MODE_NOCTCP) && ircd_strncmp(parv[parc - 1],"\001ACTION ",8))
-        for (ch=parv[parc - 1];*ch;)
-          if (*ch++==1) {
-            return 0;
-          }
+    if (client_can_send_to_channel(sptr, chptr, 0) &&
+         !(chptr->mode.mode & MODE_NONOTICE) &&                                               /* +N check */
+          (client_can_send_controlcode_or_ctcp_to_channel(sptr, chptr, parv[parc - 1], 0))) { /* +cC checks */
 
       if ((chptr->mode.mode & MODE_NOPRIVMSGS) &&
           check_target_limit(sptr, chptr, chptr->chname, 0))
